---
# -------------------------------------------------------
# Rust Actix app
#
# 1) Deployment will manage ReplicaSet
#    with 2 replicas (Pods with Rust Actix app)
# 2) Deployment will have Ingress service
#    to have access outside of Cluster
# -------------------------------------------------------

# create Deployment for Rust Actix app

apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-app
  namespace: cloudns
spec:
  selector:
    matchLabels:
      app: actix-rust-web
  replicas: 2
  template:
    metadata:
      labels:
        app: actix-rust-web
    spec:
      containers:
        - name: actix-app
          image: glebcom/actix-app:1.0.0-bullseye-slim
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - name: actix-local
              containerPort: 8080
              protocol: TCP
          env:
            - name: FASTAPI_SERVICE_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: config-map
                  key: fastapi_service_hostname
          livenessProbe:
            httpGet:
              port: actix-local
              path: /
            initialDelaySeconds: 3
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: actix-local
              path: /
            initialDelaySeconds: 3
            periodSeconds: 10
          volumeMounts:
            - name: config
              mountPath: "/config"
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: config-map

---
# create ClusterIP internal Service

apiVersion: v1
kind: Service
metadata:
  name: actix-internal-service
  namespace: cloudns
spec:
  selector:
    app: actix-rust-web
  ports:
    - protocol: TCP
      port: 80
      targetPort: actix-local
---
# create LoadBalancer Service

# apiVersion: v1
# kind: Service
# metadata:
#   name: actix-app-service
#   namespace: cloudns
# spec:
#   type: LoadBalancer
#   selector:
#     app: actix-rust-web
#   ports:
#     - protocol: TCP
#       port: 8090 # localhost:8090
#       targetPort: actix-local

---
# Add Ingress

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: actix-ingress
  namespace: cloudns
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: "actix-app.cloud.ru"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: actix-internal-service
                port:
                  number: 80
          - path: /check_fastapi_app.*
            pathType: ImplementationSpecific
            backend:
              service:
                name: actix-internal-service
                port:
                  number: 80
